---
import { Icon } from 'astro-icon/components'

const links = [
  { href: '/#start', label: 'Inicio', icon: 'home' },
  { href: '/#resume', label: 'Mi experiencia', icon: 'resume' },
  { href: '/#medium', label: 'Posts', icon: 'post' },
  { href: '/resources', label: 'Recursos', icon: 'resources' }
]
---

<div
  class='md:w-screen fixed h-16 z-50 md:flex bottom-6 inset-x-0 m-auto md:bottom-auto max-w-4xl'
  transition:persist
>
  <div
    class='flex h-full mx-auto px-4 justify-center lg:justify-end md:mx-0 md:ml-auto'
  >
    <div
      id='nav'
      class='relative flex justify-end items-center h-full bg-black/60 md:bg-opacity-20 md:rounded-br-xl md:rounded-bl-xl md:rounded-none overflow-hidden rounded-xl backdrop-blur-[16px] backdrop-saturate-[200%]'
    >
      <div
        id='underline'
        class='absolute bottom-0 left-0 h-1 w-0 bg-white transition-all duration-300 ease-in-out z-10'
      >
      </div>

      {
        links.map(({ href, label, icon }) => {
          return (
            <a
              href={href}
              class='relative justify-center text-white font-bold flex h-full items-center hover:bg-black hover:bg-opacity-20 px-6 md:px-4 flex flex-col'
              data-href={href}
            >
              <Icon name={icon} class='md:hidden mb-1 text-2xl' />
              <span class='text-xs md:text-base'>{label}</span>
            </a>
          )
        })
      }
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const underline = document.getElementById('underline')
    const nav = document.getElementById('nav')
    const links = document.querySelectorAll('.relative a')

    const getCurrentPath = () => {
      const { pathname, hash } = window.location

      return hash.length ? `/${hash}` : pathname !== '/' ? pathname : '/#start'
    }

    const updateUnderline = (link: HTMLElement) => {
      const { left, width } = link.getBoundingClientRect()
      const containerLeft = nav?.getBoundingClientRect().left
      if (!underline || !containerLeft) return
      underline.style.width = `${width}px`
      underline.style.left = `${left - containerLeft}px`
    }

    const init = () => {
      const currentPath = getCurrentPath()

      let activeLink = null
      links.forEach((link) => {
        link.classList.remove('current')

        if (link.getAttribute('href') === currentPath) {
          link.classList.add('current')
          activeLink = link
        }
      })

      if (activeLink) {
        updateUnderline(activeLink)
      }

      links.forEach((link) => {
        link.addEventListener('mouseenter', () =>
          updateUnderline(link as HTMLElement)
        )
        link.addEventListener('mouseleave', () => {
          const currentActive = document.querySelector(
            '.relative a.current'
          ) as HTMLElement
          if (currentActive) updateUnderline(currentActive)
        })

        link.addEventListener('click', () => {
          links.forEach((el) => el.classList.remove('current'))
          link.classList.add('current')
          updateUnderline(link as HTMLElement)
        })
      })
    }

    init()
  })
</script>
